<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Angular - 标签 - 寂的博客</title>
        <link>http://localhost:1313/tags/angular/</link>
        <description>Angular - 标签 - 寂的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>1621209357@qq.com (寂)</managingEditor>
            <webMaster>1621209357@qq.com (寂)</webMaster><lastBuildDate>Sat, 25 Apr 2020 22:27:41 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/angular/" rel="self" type="application/rss+xml" /><item>
    <title>用 NgRx 和 Nest 写一个全栈 todolist</title>
    <link>http://localhost:1313/2020-04-25-typescript-fullstack/</link>
    <pubDate>Sat, 25 Apr 2020 22:27:41 &#43;0800</pubDate>
    <author>寂</author>
    <guid>http://localhost:1313/2020-04-25-typescript-fullstack/</guid>
    <description><![CDATA[<p>本次实践我将使用 Angular 和 Nest.js 写一个带有状态管理，登录验证的全栈 todolist 应用。</p>
<h2 id="后端开发">后端开发</h2>
<p>后端开发使用 Nest.js 框架，本次实践是重前端的，因此后端会做得简单一些。后端是在上一次鉴权认证的代码做部分修改。如果有不懂的代码，可以参考之前的<a href="https://111hunter.github.io/2020-03-29-nest-auth/" target="_blank" rel="noopener noreffer">文章</a>
。此部分的讲解略过。这是后端部分生成的 swagger 接口文档:</p>]]></description>
</item>
<item>
    <title>初探 RxJS - Observable 的简单创建</title>
    <link>http://localhost:1313/2020-03-13-rxjs-01/</link>
    <pubDate>Fri, 13 Mar 2020 11:50:32 &#43;0800</pubDate>
    <author>寂</author>
    <guid>http://localhost:1313/2020-03-13-rxjs-01/</guid>
    <description><![CDATA[<blockquote>
<p>ReactiveX 结合了 <strong>观察者模式</strong>、<strong>迭代器模式</strong> 和 <strong>使用集合的函数式编程</strong>，以满足以一种理想方式来管理事件序列所需要的一切。</p></blockquote>
<p>在 RxJS 中用来解决异步事件管理的的基本概念是：</p>]]></description>
</item>
</channel>
</rss>
