<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rx on 浮槎的博客</title>
    <link>http://example.org/tags/rx/</link>
    <description>Recent content in Rx on 浮槎的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 25 Apr 2020 22:27:41 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/tags/rx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 NgRx 和 Nest 写一个全栈 todolist</title>
      <link>http://example.org/2020-04-25-typescript-fullstack/</link>
      <pubDate>Sat, 25 Apr 2020 22:27:41 +0800</pubDate>
      
      <guid>http://example.org/2020-04-25-typescript-fullstack/</guid>
      <description>本次实践我将使用 Angular 和 Nest.js 写一个带有状态管理，登录验证的全栈 todolist 应用。 后端开发 后端开发使用 Nest.js 框架，本次实践是重前端的，因此后端会做得简单一些。后端</description>
    </item>
    
    <item>
      <title>初探 RxJS - Observable 的简单创建</title>
      <link>http://example.org/2020-03-13-rxjs-01/</link>
      <pubDate>Fri, 13 Mar 2020 11:50:32 +0800</pubDate>
      
      <guid>http://example.org/2020-03-13-rxjs-01/</guid>
      <description>ReactiveX 结合了 观察者模式、迭代器模式 和 使用集合的函数式编程，以满足以一种理想方式来管理事件序列所需要的一切。 在 RxJS 中用来解决异步事件管理的的基本概念</description>
    </item>
    
    <item>
      <title>通过 NgRx 体验前端状态管理</title>
      <link>http://example.org/2020-03-02-ngrx/</link>
      <pubDate>Mon, 02 Mar 2020 17:09:36 +0800</pubDate>
      
      <guid>http://example.org/2020-03-02-ngrx/</guid>
      <description>前端中的状态指什么？前端中的状态指的是影响 UI 变化的数据。例如用户登入退出，用户的某种操作带来的 UI 视觉变化，UI 主题的切换，甚至路由的切换也是</description>
    </item>
    
  </channel>
</rss>